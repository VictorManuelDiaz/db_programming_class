// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicPlayer.Adaptors.SQLServerDataAccess.Contexts;

namespace MusicPlayer.Adaptors.SQLServerDataAccess.Migrations
{
    [DbContext(typeof(PlaylistDB))]
    [Migration("20220609022242_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.AddedSong", b =>
                {
                    b.Property<Guid>("playlist_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("song_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("addition_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("playlist_id", "song_id");

                    b.HasIndex("song_id");

                    b.ToTable("tb_added_song");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.Playlist", b =>
                {
                    b.Property<Guid>("playlist_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("creation_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("playlist_id");

                    b.HasIndex("user_id");

                    b.ToTable("tb_playlist");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.Song", b =>
                {
                    b.Property<Guid>("song_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("album")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("length")
                        .HasColumnType("time");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("song_id");

                    b.ToTable("tb_song");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<string>("last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("user_id");

                    b.ToTable("tb_user");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.AddedSong", b =>
                {
                    b.HasOne("MusicPlayer.Core.Domain.Models.Playlist", "Playlist")
                        .WithMany("AddedSongs")
                        .HasForeignKey("playlist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicPlayer.Core.Domain.Models.Song", "Song")
                        .WithMany("AddedSongs")
                        .HasForeignKey("song_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.Playlist", b =>
                {
                    b.HasOne("MusicPlayer.Core.Domain.Models.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.Playlist", b =>
                {
                    b.Navigation("AddedSongs");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.Song", b =>
                {
                    b.Navigation("AddedSongs");
                });

            modelBuilder.Entity("MusicPlayer.Core.Domain.Models.User", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
